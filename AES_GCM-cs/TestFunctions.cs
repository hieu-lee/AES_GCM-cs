namespace AES_GCM_cs;

[MemoryDiagnoser]
public class TestFunctions
{
    [Benchmark]
    public void MyAES()
    {
        var Key = new byte[16]
        {
            0x00, 0x01, 0x02, 0x03,
            0x04, 0x05, 0x06, 0x07,
            0x08, 0x09, 0x0a, 0x0b,
            0x0c, 0x0d, 0x0e, 0x0f
        };

        var Input = new byte[16]
        {
            0x00, 0x11, 0x22, 0x33,
            0x44, 0x55, 0x66, 0x77,
            0x88, 0x99, 0xaa, 0xbb,
            0xcc, 0xdd, 0xee, 0xff
        };

        aes128.AES128E(Input, Key);
    }

    [Benchmark]
    public void TheirAES()
    {
        var Key = new byte[16]
        {
            0x00, 0x01, 0x02, 0x03,
            0x04, 0x05, 0x06, 0x07,
            0x08, 0x09, 0x0a, 0x0b,
            0x0c, 0x0d, 0x0e, 0x0f
        };

        var Input = new byte[16]
        {
            0x00, 0x11, 0x22, 0x33,
            0x44, 0x55, 0x66, 0x77,
            0x88, 0x99, 0xaa, 0xbb,
            0xcc, 0xdd, 0xee, 0xff
        };

        var C = new byte[16];
        aes128e.AES128E(Input, Key, C);
    }

    [Benchmark]
    public void MyGCM()
    {
        byte[] K = new byte[16]
        {
            0x98,0xff,0xf6,0x7e,0x64,0xe4,0x6b,0xe5,0xee,0x2e,0x05,0xcc,0x9a,0xf6,0xd0,0x12
        };

        byte[] IV = new byte[12]
        {
            0x2d, 0xfb, 0x42, 0x9a, 0x48, 0x69, 0x7c, 0x34, 0x00, 0x6d, 0xa8, 0x86
        };

        byte[] P = new byte[48]
        {
            0x29,0xb9,0x1b,0x4a,0x68,0xa9,0x9f,0x97,0xc4,0x1c,0x75,0x08,0xf1,0x7a,0x5c,0x7a,
            0x7a,0xfc,0x9e,0x1a,0xca,0x83,0xe1,0x29,0xb0,0x85,0xbd,0x63,0x7f,0xf6,0x7c,0x01,
            0x29,0xb9,0x1b,0x4a,0x68,0xa9,0x9f,0x97,0xc4,0x1c,0x75,0x08,0xf1,0x7a,0x5c,0x7a
        };

        byte[] A = new byte[48]
        {
            0xa0,0xca,0x58,0x61,0xc0,0x22,0x6c,0x5b,0x5a,0x65,0x14,0xc8,0x2b,0x77,0x81,0x5a,
            0x9e,0x0e,0xb3,0x59,0xd0,0xd4,0x6d,0x03,0x33,0xc3,0xf2,0xba,0xe1,0x4d,0xa0,0xc4,
            0x03,0x30,0xc0,0x02,0x16,0xb4,0xaa,0x64,0xb7,0xc1,0xed,0xb8,0x71,0xc3,0x28,0xf6
        };

        _ = aes128gcm.AES128GCMe(IV, P, A, K);
    }

    [Benchmark]
    public void TheirGCM()
    {
        byte[] K = new byte[16]
        {
            0x98,0xff,0xf6,0x7e,0x64,0xe4,0x6b,0xe5,0xee,0x2e,0x05,0xcc,0x9a,0xf6,0xd0,0x12
        };

        byte[] IV = new byte[12]
        {
            0x2d, 0xfb, 0x42, 0x9a, 0x48, 0x69, 0x7c, 0x34, 0x00, 0x6d, 0xa8, 0x86
        };

        byte[] P = new byte[48]
        {
            0x29,0xb9,0x1b,0x4a,0x68,0xa9,0x9f,0x97,0xc4,0x1c,0x75,0x08,0xf1,0x7a,0x5c,0x7a,
            0x7a,0xfc,0x9e,0x1a,0xca,0x83,0xe1,0x29,0xb0,0x85,0xbd,0x63,0x7f,0xf6,0x7c,0x01,
            0x29,0xb9,0x1b,0x4a,0x68,0xa9,0x9f,0x97,0xc4,0x1c,0x75,0x08,0xf1,0x7a,0x5c,0x7a
        };

        byte[] A = new byte[48]
        {
            0xa0,0xca,0x58,0x61,0xc0,0x22,0x6c,0x5b,0x5a,0x65,0x14,0xc8,0x2b,0x77,0x81,0x5a,
            0x9e,0x0e,0xb3,0x59,0xd0,0xd4,0x6d,0x03,0x33,0xc3,0xf2,0xba,0xe1,0x4d,0xa0,0xc4,
            0x03,0x30,0xc0,0x02,0x16,0xb4,0xaa,0x64,0xb7,0xc1,0xed,0xb8,0x71,0xc3,0x28,0xf6
        };

        var C = new byte[48];
        var T = new byte[16];

        Aes128GcmAlter.AES128GCM(C, T, K, IV, P, A);
    }

    public static void RunTest()
    {
        Console.WriteLine("Please choose one of the 3 following choices.");
        Console.WriteLine("What do you want to see?");
        Console.WriteLine("1. Test result of AES128");
        Console.WriteLine("2. Test result of AES128GCM");
        Console.WriteLine("3. Performance comparision between my AES128GCM implementation and the given implementation online");
        Console.Write("Choose a number from 1 to 3: ");
        var s = Console.ReadLine();
        s = s.Trim();
        switch (s)
        {
            case "1":
                aes128.Test();
                break;
            case "2":
                aes128gcm.Test();
                break;
            case "3":
                var summary = BenchmarkRunner.Run<TestFunctions>();
                break;
            default:
                Console.WriteLine("Unidentified choice, the program is shutting down...");
                Console.WriteLine("Press any key to close this window...");
                Console.ReadLine();
                return;
        }
        Console.WriteLine("Press any key to close this window...");
        Console.ReadLine();
        return;
    }

    public static void RunTestAlternative()
    {
        Console.WriteLine("Enter the plaintext");
        var p = Console.ReadLine();
        var P = Encoding.UTF8.GetBytes(p);
        Console.WriteLine("Enter the additional data");
        var a = Console.ReadLine();
        var A = Encoding.UTF8.GetBytes(a);
        byte[] K = new byte[16]
        {
            0x98,0xff,0xf6,0x7e,0x64,0xe4,0x6b,0xe5,0xee,0x2e,0x05,0xcc,0x9a,0xf6,0xd0,0x12
        };

        byte[] IV = new byte[12]
        {
            0x2d, 0xfb, 0x42, 0x9a, 0x48, 0x69, 0x7c, 0x34, 0x00, 0x6d, 0xa8, 0x86
        };

        var res = aes128gcm.AES128GCMe(IV, P, A, K);
        var C = res.CipherText;
        var T = res.Tag;

        var _p = aes128gcm.AES128GCMd(IV, C, K, A, T);
        Console.WriteLine("\nText after decryption:");
        Console.WriteLine(Encoding.UTF8.GetString(_p));
    }

    public static void PrintArray(byte[] arr)
    {
        string[] Arr = new string[arr.Length];
        for (int i = 0; i < arr.Length; i++)
        {
            Arr[i] = arr[i].ToString();
        }
        Console.WriteLine(string.Join(' ', Arr));
    }
}

